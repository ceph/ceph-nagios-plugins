#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright (c) 2020 Binero AB https://binero.com
#  Copyright (c) 2013 Catalyst IT http://www.catalyst.net.nz
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import argparse
import os
import re
import subprocess
import sys
import socket
import json

__version__ = '1.1.0'

CEPH_COMMAND = '/usr/bin/ceph'
CEPH_ADM_COMMAND = '/usr/sbin/cephadm'

STATUS_OK = 0
STATUS_CRITICAL = 2
STATUS_UNKNOWN = 3


def main():
    parser = argparse.ArgumentParser(description="'ceph osd' nagios plugin.")

    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-A','--admexe', help='cephadm executable [%s]' % CEPH_ADM_COMMAND)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-m','--monaddress', help='ceph monitor address[:port]')
    parser.add_argument('-i','--id', help='ceph client id')
    parser.add_argument('-k','--keyring', help='ceph client keyring file')
    parser.add_argument('-H','--host', help='osd host', required=True)
    parser.add_argument('-C','--critical', help='critical threshold', default=60)
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    parser.add_argument('-a','--cephadm', help='uses cephadm to execute the command', action='store_true')

    args = parser.parse_args()

    if args.version:
        print('version %s' % __version__)
        return STATUS_OK

    cephadm_exec = args.admexe if args.admexe else CEPH_ADM_COMMAND
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if args.cephadm:
        if not os.path.exists(cephadm_exec):
            print("ERROR: cephadm executable '%s' doesn't exist" % cephadm_exec)
            return STATUS_UNKNOWN
    else:
        if not os.path.exists(ceph_exec):
            print("UNKNOWN: ceph executable '%s' doesn't exist" % ceph_exec)
            return STATUS_UNKNOWN

    if args.conf and not os.path.exists(args.conf):
        print("UNKNOWN: ceph conf file '%s' doesn't exist" % args.conf)
        return STATUS_UNKNOWN

    if args.keyring and not os.path.exists(args.keyring):
        print("UNKNOWN: keyring file '%s' doesn't exist" % args.keyring)
        return STATUS_UNKNOWN

    if not args.host:
        print("UNKNOWN: no OSD hostname given")
        return STATUS_UNKNOWN

    try:
      addrinfo = socket.getaddrinfo(args.host, None, 0, socket.SOCK_STREAM)
      args.host = addrinfo[0][-1][0]
      if addrinfo[0][0] == socket.AF_INET6:
          args.host = "[%s]" % args.host
    except Exception:
        print('UNKNOWN: could not resolve %s' % args.host)
        return STATUS_UNKNOWN

    base_ceph_cmd = [ceph_exec]

    if args.cephadm:
        # Prepend the command with the cephadm binary and the shell command
        base_ceph_cmd = [cephadm_exec, 'shell']

        if args.keyring:
            base_ceph_cmd.append('-v')
            base_ceph_cmd.append('%s:%s:ro' % (args.keyring, args.keyring))
        base_ceph_cmd.append('--')
        base_ceph_cmd.append(ceph_exec)

    if args.monaddress:
        base_ceph_cmd.append('-m')
        base_ceph_cmd.append(args.monaddress)
    if args.conf:
        base_ceph_cmd.append('-c')
        base_ceph_cmd.append(args.conf)
    if args.id:
        base_ceph_cmd.append('--id')
        base_ceph_cmd.append(args.id)
    if args.keyring:
        base_ceph_cmd.append('--keyring')
        base_ceph_cmd.append(args.keyring)

    ceph_cmd = base_ceph_cmd.copy()
    ceph_cmd.append('osd')
    ceph_cmd.append('dump')

    p = subprocess.Popen(ceph_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()

    if p.returncode != 0 or not output:
        print("CRITICAL: %s" % '\n'.join(err.decode('utf-8').split('\n')[(4 if args.cephadm else 0):]))
        return STATUS_CRITICAL

    # escape IPv4 host address
    osd_host = args.host.replace('.', '\.')
    # escape IPv6 host address
    osd_host = osd_host.replace('[', '\[')
    osd_host = osd_host.replace(']', '\]')

    osds_up = re.findall(r"^(osd\.[^ ]*) up.*%s:" % (osd_host), output.decode('utf-8'), re.MULTILINE)

    final_status = STATUS_OK
    lines = []

    for osd in osds_up:
        daemon_ceph_cmd = base_ceph_cmd.copy()
        daemon_ceph_cmd.append('--format')
        daemon_ceph_cmd.append('json')
        daemon_ceph_cmd.append('daemon')
        daemon_ceph_cmd.append(osd)
        daemon_ceph_cmd.append('perf')
        daemon_ceph_cmd.append('dump')

        p = subprocess.Popen(daemon_ceph_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output, err = p.communicate()

        if p.returncode != 0 or not output:
            print("CRITICAL: %s" % '\n'.join(err.decode('utf-8').split('\n')[(4 if args.cephadm else 0):]))
            return STATUS_CRITICAL

        try:
            data = json.loads(output)
        except Exception:
            print("CRITICAL: failed to load json")
            return STATUS_CRITICAL

        bluefs = data.get('bluefs', None)

        if not bluefs:
            continue

        db_total_bytes = bluefs.get('db_total_bytes')
        db_used_bytes = bluefs.get('db_used_bytes')
        perc = (float(db_used_bytes) / float(db_total_bytes) * 100)

        if perc >= float(args.critical) and final_status == STATUS_OK:
            final_status = STATUS_CRITICAL

        lines.append("%s=%.2f%%" % (osd, perc))

    if final_status == STATUS_OK:
        print("OK: %s" % (' '.join(lines)))
    else:
        print("CRITICAL: %s" % (' '.join(lines)))

    return final_status


if __name__ == "__main__":
    sys.exit(main())
